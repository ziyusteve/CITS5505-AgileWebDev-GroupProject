[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.api",
        "description": "app.api",
        "isExtraImport": true,
        "detail": "app.api",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "isExtraImport": true,
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "isExtraImport": true,
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "isExtraImport": true,
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "isExtraImport": true,
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "isExtraImport": true,
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Share",
        "importPath": "app.models.share",
        "description": "app.models.share",
        "isExtraImport": true,
        "detail": "app.models.share",
        "documentation": {}
    },
    {
        "label": "Share",
        "importPath": "app.models.share",
        "description": "app.models.share",
        "isExtraImport": true,
        "detail": "app.models.share",
        "documentation": {}
    },
    {
        "label": "Share",
        "importPath": "app.models.share",
        "description": "app.models.share",
        "isExtraImport": true,
        "detail": "app.models.share",
        "documentation": {}
    },
    {
        "label": "Share",
        "importPath": "app.models.share",
        "description": "app.models.share",
        "isExtraImport": true,
        "detail": "app.models.share",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_unique_filename",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "sanitize_filename",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "validate_csrf_token",
        "importPath": "app.utils",
        "description": "app.utils",
        "isExtraImport": true,
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "get_gemini_api",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "EqualTo",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.auth",
        "description": "app.auth",
        "isExtraImport": true,
        "detail": "app.auth",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "isExtraImport": true,
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "isExtraImport": true,
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.dashboard",
        "description": "app.dashboard",
        "isExtraImport": true,
        "detail": "app.dashboard",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "FileRequired",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.datasets",
        "description": "app.datasets",
        "isExtraImport": true,
        "detail": "app.datasets",
        "documentation": {}
    },
    {
        "label": "UploadDatasetForm",
        "importPath": "app.datasets.forms",
        "description": "app.datasets.forms",
        "isExtraImport": true,
        "detail": "app.datasets.forms",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.sharing",
        "description": "app.sharing",
        "isExtraImport": true,
        "detail": "app.sharing",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.visualization",
        "description": "app.visualization",
        "isExtraImport": true,
        "detail": "app.visualization",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "validate_csrf",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ScoutAnalysisService",
        "importPath": "app.scout_analysis.services",
        "description": "app.scout_analysis.services",
        "isExtraImport": true,
        "detail": "app.scout_analysis.services",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "analyze_text",
        "kind": 2,
        "importPath": "app.api.gemini_analysis",
        "description": "app.api.gemini_analysis",
        "peekOfCode": "def analyze_text():\n    \"\"\"\n    Analyze text using Gemini API\n    Expected JSON body:\n    {\n        \"text\": \"Your text to analyze\",\n        \"analysis_type\": \"sentiment|keywords|summary|classification\",\n        \"options\": {\n            // Optional parameters specific to the analysis type\n            \"max_words\": 100,  // For summary",
        "detail": "app.api.gemini_analysis",
        "documentation": {}
    },
    {
        "label": "bp",
        "kind": 5,
        "importPath": "app.api.gemini_analysis",
        "description": "app.api.gemini_analysis",
        "peekOfCode": "bp = Blueprint(\"api\", __name__, url_prefix=\"/api\")\n@bp.route(\"/analyze\", methods=[\"POST\"])\ndef analyze_text():\n    \"\"\"\n    Analyze text using Gemini API\n    Expected JSON body:\n    {\n        \"text\": \"Your text to analyze\",\n        \"analysis_type\": \"sentiment|keywords|summary|classification\",\n        \"options\": {",
        "detail": "app.api.gemini_analysis",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def health_check():\n    \"\"\"Health check endpoint for monitoring systems\"\"\"\n    try:\n        # Test database connection\n        db.session.execute(\"SELECT 1\").fetchone()\n        db_status = \"ok\"\n    except Exception as e:\n        current_app.logger.error(f\"Health check database error: {str(e)}\")\n        db_status = \"error\"\n    # Import version info",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "analyze_dataset",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def analyze_dataset(df):\n    \"\"\"Analyze the dataset, generate statistics and insights\"\"\"\n    result = {\n        \"column_count\": len(df.columns),\n        \"row_count\": len(df),\n        \"preview\": df.head(10).to_dict(\"records\"),\n    }\n    # Calculate statistics for numeric columns\n    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n    categorical_columns = [col for col in df.columns if col not in numeric_columns]",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "dataset_analyze",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def dataset_analyze(dataset_id):\n    \"\"\"Dataset analysis API endpoint\"\"\"\n    if not current_user.is_authenticated:\n        return jsonify({\"error\": \"Authentication required\"}), 401\n    user_id = current_user.id\n    dataset = Dataset.query.get_or_404(dataset_id)\n    # Check if the user owns the dataset or the dataset is shared with them\n    is_owner = dataset.user_id == user_id\n    is_shared = (\n        Share.query.filter_by(dataset_id=dataset_id, shared_with_id=user_id).first()",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "dataset_visualize",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def dataset_visualize(dataset_id):\n    \"\"\"Dataset visualization API endpoint\"\"\"\n    if not current_user.is_authenticated:\n        return jsonify({\"error\": \"Authentication required\"}), 401\n    user_id = current_user.id\n    dataset = Dataset.query.get_or_404(dataset_id)\n    # Check if the user owns the dataset or the dataset is shared with them\n    is_owner = dataset.user_id == user_id\n    is_shared = (\n        Share.query.filter_by(dataset_id=dataset_id, shared_with_id=user_id).first()",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "scout_analysis",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def scout_analysis(dataset_id):\n    \"\"\"Scout report analysis API endpoint\"\"\"\n    if not current_user.is_authenticated:\n        return (\n            jsonify(\n                {\"error\": \"Authentication required\", \"processing_status\": \"failed\"}\n            ),\n            401,\n        )\n    user_id = current_user.id",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "test_api",
        "kind": 2,
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "peekOfCode": "def test_api():\n    \"\"\"Test API connection endpoint, no authentication required\"\"\"\n    try:\n        # Import scout analysis service\n        from app.scout_analysis.services import ScoutAnalysisService\n        # Get API key and version\n        api_key = current_app.config.get(\"GEMINI_API_KEY\")\n        api_key_masked = f\"{api_key[:5]}...{api_key[-5:]}\" if api_key else \"Not set\"\n        # Generate a short test text\n        test_text = (",
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class LoginForm(FlaskForm):\n    \"\"\"User login form\"\"\"\n    username = StringField(\"Username\", validators=[DataRequired()])\n    password = PasswordField(\"Password\", validators=[DataRequired()])\n    remember = BooleanField(\"Remember Me\")\n    submit = SubmitField(\"Login\")\nclass RegisterForm(FlaskForm):\n    \"\"\"User registration form\"\"\"\n    username = StringField(\n        \"Username\", validators=[DataRequired(), Length(min=3, max=20)]",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    \"\"\"User registration form\"\"\"\n    username = StringField(\n        \"Username\", validators=[DataRequired(), Length(min=3, max=20)]\n    )\n    email = StringField(\"Email\", validators=[DataRequired(), Email()])\n    password = PasswordField(\"Password\", validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField(\n        \"Confirm Password\", validators=[DataRequired(), EqualTo(\"password\")]\n    )",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def register():\n    \"\"\"User registration route.\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for(\"dashboard.index\"))\n    form = RegisterForm()\n    if form.validate_on_submit():\n        # Form validators already check for duplicate username and email\n        user = User(username=form.username.data, email=form.email.data)\n        user.set_password(form.password.data)\n        db.session.add(user)",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def login():\n    \"\"\"User login route.\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for(\"dashboard.index\"))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user is None or not user.check_password(form.password.data):\n            flash(\"Please check your login details and try again.\", \"danger\")\n            return redirect(url_for(\"auth.login\"))",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def logout():\n    \"\"\"User logout route.\"\"\"\n    logout_user()\n    flash(\"You have been successfully logged out.\", \"success\")\n    return redirect(url_for(\"auth.login\"))\n@bp.route(\"/terms\")\ndef terms():\n    return render_template(\"auth/terms.html\")\n@bp.route(\"/privacy\")\ndef privacy():",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "terms",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def terms():\n    return render_template(\"auth/terms.html\")\n@bp.route(\"/privacy\")\ndef privacy():\n    return render_template(\"auth/privacy.html\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "privacy",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def privacy():\n    return render_template(\"auth/privacy.html\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.dashboard.routes",
        "description": "app.dashboard.routes",
        "peekOfCode": "def index():\n    \"\"\"User dashboard routes\"\"\"\n    user_id = current_user.id\n    user_datasets = Dataset.query.filter_by(user_id=user_id).all()\n    # Get datasets shared with the user\n    shared_with_user = (\n        db.session.query(Dataset)\n        .join(Share)\n        .filter(Share.shared_with_id == user_id)\n        .all()",
        "detail": "app.dashboard.routes",
        "documentation": {}
    },
    {
        "label": "UploadDatasetForm",
        "kind": 6,
        "importPath": "app.datasets.forms",
        "description": "app.datasets.forms",
        "peekOfCode": "class UploadDatasetForm(FlaskForm):\n    \"\"\"Dataset upload form\"\"\"\n    title = StringField(\"Player Name\", validators=[Optional(), Length(max=100)])\n    file = FileField(\"Upload File\", validators=[FileRequired(\"Please select a file\")])\n    submit = SubmitField(\"Analyze and Generate Scout Report\")\n    def validate_file(self, field):\n        \"\"\"Validate if the file type is allowed\"\"\"\n        if field.data:\n            # Get file extension\n            filename = field.data.filename",
        "detail": "app.datasets.forms",
        "documentation": {}
    },
    {
        "label": "upload",
        "kind": 2,
        "importPath": "app.datasets.routes",
        "description": "app.datasets.routes",
        "peekOfCode": "def upload():\n    \"\"\"Dataset upload routes\"\"\"\n    form = UploadDatasetForm()\n    if form.validate_on_submit():\n        file = form.file.data\n        title = form.title.data\n        # 增强文件名安全性\n        filename = secure_filename(file.filename)\n        filename = sanitize_filename(filename)\n        # 生成唯一文件名",
        "detail": "app.datasets.routes",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def index():\n    \"\"\"Website homepage route\"\"\"\n    return render_template(\"main/index.html\")",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "kind": 6,
        "importPath": "app.models.dataset",
        "description": "app.models.dataset",
        "peekOfCode": "class Dataset(db.Model):\n    __tablename__ = \"datasets\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    date_uploaded = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    file_path = db.Column(db.String(255), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    shares = db.relationship(\n        \"Share\", backref=\"dataset\", lazy=True, cascade=\"all, delete\"",
        "detail": "app.models.dataset",
        "documentation": {}
    },
    {
        "label": "Share",
        "kind": 6,
        "importPath": "app.models.share",
        "description": "app.models.share",
        "peekOfCode": "class Share(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    dataset_id = db.Column(db.Integer, db.ForeignKey(\"datasets.id\"), nullable=False)\n    shared_with_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    date_shared = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    shared_with = db.relationship(\"User\", foreign_keys=[shared_with_id])\n    def __repr__(self):\n        return f\"Share(Dataset: {self.dataset_id}, Shared with: {self.shared_with_id})\"",
        "detail": "app.models.share",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(db.Model, UserMixin):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(60), nullable=False)\n    last_login = db.Column(db.DateTime, nullable=True)\n    datasets = db.relationship(\"Dataset\", backref=\"owner\", lazy=True)\n    def set_password(self, password):\n        \"\"\"Set password hash for user\"\"\"\n        self.password = generate_password_hash(password)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "MockAnalysisService",
        "kind": 6,
        "importPath": "app.scout_analysis.mock_service",
        "description": "app.scout_analysis.mock_service",
        "peekOfCode": "class MockAnalysisService:\n    \"\"\"Mock Scout Report Analysis Service\"\"\"\n    @staticmethod\n    def analyze_text(text_content):\n        \"\"\"Analyze text and generate mock scout report analysis data\"\"\"\n        # Extract some keywords to generate relevant analysis\n        text_lower = text_content.lower()\n        name = \"Unknown Player\"\n        # Try to extract player name\n        if \"lebron\" in text_lower:",
        "detail": "app.scout_analysis.mock_service",
        "documentation": {}
    },
    {
        "label": "ScoutReportAnalysis",
        "kind": 6,
        "importPath": "app.scout_analysis.models",
        "description": "app.scout_analysis.models",
        "peekOfCode": "class ScoutReportAnalysis(db.Model):\n    \"\"\"Scout Report Analysis Result Model\"\"\"\n    __tablename__ = \"scout_report_analyses\"\n    id = db.Column(db.Integer, primary_key=True)\n    # Relationship to existing Dataset model\n    dataset_id = db.Column(db.Integer, db.ForeignKey(\"datasets.id\"), nullable=False)\n    dataset = db.relationship(\n        \"Dataset\", backref=db.backref(\"scout_analyses\", lazy=True)\n    )\n    # Analysis results",
        "detail": "app.scout_analysis.models",
        "documentation": {}
    },
    {
        "label": "extract_text_from_file",
        "kind": 2,
        "importPath": "app.scout_analysis.processors",
        "description": "app.scout_analysis.processors",
        "peekOfCode": "def extract_text_from_file(filepath):\n    \"\"\"Extract text content from various file formats (TXT, PDF, DOCX)\"\"\"\n    file_ext = filepath.split(\".\")[-1].lower()\n    if file_ext == \"txt\":\n        # Direct text extraction for TXT files\n        try:\n            with open(filepath, \"r\", encoding=\"utf-8\") as file:\n                return file.read()\n        except UnicodeDecodeError:\n            # Try different encoding if utf-8 fails",
        "detail": "app.scout_analysis.processors",
        "documentation": {}
    },
    {
        "label": "is_scout_report",
        "kind": 2,
        "importPath": "app.scout_analysis.processors",
        "description": "app.scout_analysis.processors",
        "peekOfCode": "def is_scout_report(filepath):\n    \"\"\"Determine if a file is likely a scout report based on content analysis\"\"\"\n    # First check file extension\n    file_ext = filepath.split(\".\")[-1].lower()\n    scout_extensions = current_app.config.get(\n        \"SCOUT_REPORT_EXTENSIONS\", [\"txt\", \"pdf\", \"docx\"]\n    )\n    if file_ext not in scout_extensions:\n        return False\n    # Extract text content",
        "detail": "app.scout_analysis.processors",
        "documentation": {}
    },
    {
        "label": "ScoutAnalysisService",
        "kind": 6,
        "importPath": "app.scout_analysis.services",
        "description": "app.scout_analysis.services",
        "peekOfCode": "class ScoutAnalysisService:\n    \"\"\"Scout Report Analysis Service\"\"\"\n    # Class variables for model caching\n    _nlp_model = None\n    _model_lock = threading.Lock()\n    @classmethod\n    def get_nlp_model(cls):\n        \"\"\"Lazy load NLP model, only when needed to save resources\"\"\"\n        if cls._nlp_model is None:\n            with cls._model_lock:",
        "detail": "app.scout_analysis.services",
        "documentation": {}
    },
    {
        "label": "ShareForm",
        "kind": 6,
        "importPath": "app.sharing.forms",
        "description": "app.sharing.forms",
        "peekOfCode": "class ShareForm(FlaskForm):\n    \"\"\"Form for sharing datasets\"\"\"\n    dataset_id = SelectField(\"Dataset\", validators=[DataRequired()], coerce=int)\n    user_id = SelectField(\"Share with\", validators=[DataRequired()], coerce=int)\n    submit = SubmitField(\"Share\")",
        "detail": "app.sharing.forms",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.sharing.routes",
        "description": "app.sharing.routes",
        "peekOfCode": "def index():\n    \"\"\"Data sharing page routes\"\"\"\n    user_id = current_user.id\n    user_datasets = Dataset.query.filter_by(user_id=user_id).all()\n    users = User.query.filter(User.id != user_id).all()\n    # Get existing share records to show who already has access\n    shares = Share.query.join(Dataset).filter(Dataset.user_id == user_id).all()\n    return render_template(\n        \"sharing/share.html\",\n        datasets=user_datasets,",
        "detail": "app.sharing.routes",
        "documentation": {}
    },
    {
        "label": "handle_share",
        "kind": 2,
        "importPath": "app.sharing.routes",
        "description": "app.sharing.routes",
        "peekOfCode": "def handle_share():\n    \"\"\"Process dataset sharing request\"\"\"\n    # 验证CSRF令牌\n    validate_csrf_token()\n    user_id = current_user.id\n    dataset_id = request.form.get(\"dataset_id\")\n    shared_with_id = request.form.get(\"user_id\")\n    # Validate input\n    if not dataset_id or not shared_with_id:\n        flash(\"Missing required fields\", \"danger\")",
        "detail": "app.sharing.routes",
        "documentation": {}
    },
    {
        "label": "revoke_share",
        "kind": 2,
        "importPath": "app.sharing.routes",
        "description": "app.sharing.routes",
        "peekOfCode": "def revoke_share(share_id):\n    \"\"\"Revoke dataset sharing\"\"\"\n    # 验证CSRF令牌\n    validate_csrf_token()\n    user_id = current_user.id\n    # Get share record\n    share = (\n        Share.query.join(Dataset)\n        .filter(\n            Share.id == share_id,",
        "detail": "app.sharing.routes",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "kind": 2,
        "importPath": "app.utils.text_analysis",
        "description": "app.utils.text_analysis",
        "peekOfCode": "def analyze_sentiment(text):\n    \"\"\"\n    Analyze text sentiment\n    Args:\n        text (str): Text content to analyze\n    Returns:\n        dict: Dictionary containing sentiment analysis results\n    \"\"\"\n    gemini = current_app.config.get(\"GEMINI_INSTANCE\")\n    if not gemini:",
        "detail": "app.utils.text_analysis",
        "documentation": {}
    },
    {
        "label": "extract_keywords",
        "kind": 2,
        "importPath": "app.utils.text_analysis",
        "description": "app.utils.text_analysis",
        "peekOfCode": "def extract_keywords(text):\n    \"\"\"\n    Extract keywords from text\n    Args:\n        text (str): Text content to analyze\n    Returns:\n        dict: Dictionary containing keyword extraction results\n    \"\"\"\n    gemini = current_app.config.get(\"GEMINI_INSTANCE\")\n    if not gemini:",
        "detail": "app.utils.text_analysis",
        "documentation": {}
    },
    {
        "label": "summarize_text",
        "kind": 2,
        "importPath": "app.utils.text_analysis",
        "description": "app.utils.text_analysis",
        "peekOfCode": "def summarize_text(text, max_words=50):\n    \"\"\"\n    Summarize text\n    Args:\n        text (str): Text content to summarize\n        max_words (int): Maximum word count for the summary\n    Returns:\n        dict: Dictionary containing text summarization results\n    \"\"\"\n    gemini = current_app.config.get(\"GEMINI_INSTANCE\")",
        "detail": "app.utils.text_analysis",
        "documentation": {}
    },
    {
        "label": "classify_text",
        "kind": 2,
        "importPath": "app.utils.text_analysis",
        "description": "app.utils.text_analysis",
        "peekOfCode": "def classify_text(text, categories=None):\n    \"\"\"\n    Classify text\n    Args:\n        text (str): Text content to classify\n        categories (list): Optional list of classification categories\n    Returns:\n        dict: Dictionary containing text classification results\n    \"\"\"\n    gemini = current_app.config.get(\"GEMINI_INSTANCE\")",
        "detail": "app.utils.text_analysis",
        "documentation": {}
    },
    {
        "label": "visualize",
        "kind": 2,
        "importPath": "app.visualization.routes",
        "description": "app.visualization.routes",
        "peekOfCode": "def visualize(dataset_id):\n    \"\"\"Data visualization route\"\"\"\n    user_id = current_user.id\n    dataset = Dataset.query.get_or_404(dataset_id)\n    # Check if user owns the dataset or if the dataset is shared with them\n    is_owner = dataset.user_id == user_id\n    is_shared = (\n        Share.query.filter_by(dataset_id=dataset_id, shared_with_id=user_id).first()\n        is not None\n    )",
        "detail": "app.visualization.routes",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Config:\n    \"\"\"Base configuration class\"\"\"\n    # Get secret key from environment variable, or generate a strong random key if not available\n    SECRET_KEY = os.environ.get(\"SECRET_KEY\") or secrets.token_hex(16)\n    # Calculate base directory path\n    basedir = os.path.abspath(os.path.dirname(__file__))\n    # Configure database URI\n    SQLALCHEMY_DATABASE_URI = os.environ.get(\n        \"DATABASE_URL\"\n    ) or \"sqlite:///\" + os.path.join(os.path.dirname(basedir), \"instance\", \"site.db\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class DevelopmentConfig(Config):\n    \"\"\"Development configuration\"\"\"\n    DEBUG = True\n    TESTING = False\nclass TestingConfig(Config):\n    \"\"\"Testing configuration\"\"\"\n    DEBUG = True\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///:memory:\"  # Use in-memory database for testing\nclass ProductionConfig(Config):",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class TestingConfig(Config):\n    \"\"\"Testing configuration\"\"\"\n    DEBUG = True\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = \"sqlite:///:memory:\"  # Use in-memory database for testing\nclass ProductionConfig(Config):\n    \"\"\"Production configuration\"\"\"\n    DEBUG = False\n    TESTING = False\n# Configuration dictionary",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class ProductionConfig(Config):\n    \"\"\"Production configuration\"\"\"\n    DEBUG = False\n    TESTING = False\n# Configuration dictionary\nconfig_by_name = {\n    \"development\": DevelopmentConfig,\n    \"testing\": TestingConfig,\n    \"production\": ProductionConfig,\n    \"default\": DevelopmentConfig,",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "config_by_name",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "config_by_name = {\n    \"development\": DevelopmentConfig,\n    \"testing\": TestingConfig,\n    \"production\": ProductionConfig,\n    \"default\": DevelopmentConfig,\n}",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "GeminiAPI",
        "kind": 6,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "class GeminiAPI:\n    \"\"\"Simple wrapper for Gemini API interactions\"\"\"\n    def __init__(self, api_key=None):\n        \"\"\"Initialize the Gemini API client with an API key\"\"\"\n        self.api_key = api_key\n    def set_api_key(self, api_key):\n        \"\"\"Set or update the API key\"\"\"\n        self.api_key = api_key\n    def analyze_text(self, text):\n        \"\"\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "get_gemini_api",
        "kind": 2,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "def get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:\n        object: Gemini API client instance\n    \"\"\"\n    global _gemini_api_instance\n    if _gemini_api_instance is None:\n        from flask import current_app\n        api_key = current_app.config.get(\"GEMINI_API_KEY\", \"\")",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "db = SQLAlchemy()\n# Create LoginManager instance\nlogin_manager = LoginManager()\nlogin_manager.login_view = \"auth.login\"\nlogin_manager.login_message = \"Please login to access this page.\"\nlogin_manager.login_message_category = \"info\"\n# Gemini API singleton instance\n_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.login_view = \"auth.login\"\nlogin_manager.login_message = \"Please login to access this page.\"\nlogin_manager.login_message_category = \"info\"\n# Gemini API singleton instance\n_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager.login_view",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager.login_view = \"auth.login\"\nlogin_manager.login_message = \"Please login to access this page.\"\nlogin_manager.login_message_category = \"info\"\n# Gemini API singleton instance\n_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:\n        object: Gemini API client instance",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager.login_message = \"Please login to access this page.\"\nlogin_manager.login_message_category = \"info\"\n# Gemini API singleton instance\n_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:\n        object: Gemini API client instance\n    \"\"\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "login_manager.login_message_category",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "login_manager.login_message_category = \"info\"\n# Gemini API singleton instance\n_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:\n        object: Gemini API client instance\n    \"\"\"\n    global _gemini_api_instance",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "_gemini_api_instance",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "_gemini_api_instance = None\ndef get_gemini_api():\n    \"\"\"\n    Returns the Gemini API singleton instance.\n    Returns:\n        object: Gemini API client instance\n    \"\"\"\n    global _gemini_api_instance\n    if _gemini_api_instance is None:\n        from flask import current_app",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "test_gemini_api",
        "kind": 2,
        "importPath": "app.test_gemini",
        "description": "app.test_gemini",
        "peekOfCode": "def test_gemini_api():\n    \"\"\"Test Gemini API connection\"\"\"\n    try:\n        gemini = get_gemini_api()\n        if not gemini.api_key:\n            # Try to update API key from current app config\n            try:\n                api_key = current_app.config.get(\"GEMINI_API_KEY\", \"\")\n                if api_key:\n                    gemini.set_api_key(api_key)",
        "detail": "app.test_gemini",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def allowed_file(filename):\n    \"\"\"Check if the file extension is allowed\"\"\"\n    allowed_extensions = {\"csv\", \"txt\", \"json\", \"xlsx\", \"xls\"}\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in allowed_extensions\ndef generate_unique_filename(filename):\n    \"\"\"Generate a unique filename while preserving the original extension\"\"\"\n    if \".\" in filename:\n        name, ext = filename.rsplit(\".\", 1)\n        return f\"{name}_{str(uuid.uuid4())}.{ext}\"\n    return f\"{filename}_{str(uuid.uuid4())}\"",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "generate_unique_filename",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def generate_unique_filename(filename):\n    \"\"\"Generate a unique filename while preserving the original extension\"\"\"\n    if \".\" in filename:\n        name, ext = filename.rsplit(\".\", 1)\n        return f\"{name}_{str(uuid.uuid4())}.{ext}\"\n    return f\"{filename}_{str(uuid.uuid4())}\"\ndef sanitize_filename(filename):\n    \"\"\"Remove any potentially dangerous characters from filenames\"\"\"\n    # Remove any path components (might be dangerous)\n    filename = os.path.basename(filename)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "sanitize_filename",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def sanitize_filename(filename):\n    \"\"\"Remove any potentially dangerous characters from filenames\"\"\"\n    # Remove any path components (might be dangerous)\n    filename = os.path.basename(filename)\n    # Replace any unusual characters\n    filename = re.sub(r\"[^\\w\\.-]\", \"_\", filename)\n    return filename\ndef validate_csrf_token():\n    \"\"\"验证CSRF令牌，如果无效则中止请求\"\"\"\n    csrf_token = request.form.get(\"csrf_token\")",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "validate_csrf_token",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def validate_csrf_token():\n    \"\"\"验证CSRF令牌，如果无效则中止请求\"\"\"\n    csrf_token = request.form.get(\"csrf_token\")\n    if not csrf_token:\n        flash(\"CSRF token missing\", \"danger\")\n        abort(400)\n    try:\n        validate_csrf(csrf_token)\n    except Exception:\n        flash(\"CSRF token validation failed\", \"danger\")",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "load_dataset",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def load_dataset(file_path):\n    \"\"\"Load a dataset based on file extension\"\"\"\n    ext = file_path.rsplit(\".\", 1)[1].lower() if \".\" in file_path else \"\"\n    try:\n        if ext == \"csv\":\n            df = pd.read_csv(file_path)\n        elif ext == \"xlsx\":\n            df = pd.read_excel(file_path)\n        elif ext == \"json\":\n            df = pd.read_json(file_path)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "app.VERSION",
        "description": "app.VERSION",
        "peekOfCode": "__version__ = \"1.0.0\"\n__release_date__ = \"2025-05-05\"\n# Version tuple for programmatic comparison\nVERSION = (1, 0, 0)\n# Dictionary form for API responses\nVERSION_INFO = {\n    \"version\": __version__,\n    \"release_date\": __release_date__,\n    \"major\": VERSION[0],\n    \"minor\": VERSION[1],",
        "detail": "app.VERSION",
        "documentation": {}
    },
    {
        "label": "__release_date__",
        "kind": 5,
        "importPath": "app.VERSION",
        "description": "app.VERSION",
        "peekOfCode": "__release_date__ = \"2025-05-05\"\n# Version tuple for programmatic comparison\nVERSION = (1, 0, 0)\n# Dictionary form for API responses\nVERSION_INFO = {\n    \"version\": __version__,\n    \"release_date\": __release_date__,\n    \"major\": VERSION[0],\n    \"minor\": VERSION[1],\n    \"patch\": VERSION[2],",
        "detail": "app.VERSION",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "app.VERSION",
        "description": "app.VERSION",
        "peekOfCode": "VERSION = (1, 0, 0)\n# Dictionary form for API responses\nVERSION_INFO = {\n    \"version\": __version__,\n    \"release_date\": __release_date__,\n    \"major\": VERSION[0],\n    \"minor\": VERSION[1],\n    \"patch\": VERSION[2],\n}",
        "detail": "app.VERSION",
        "documentation": {}
    },
    {
        "label": "VERSION_INFO",
        "kind": 5,
        "importPath": "app.VERSION",
        "description": "app.VERSION",
        "peekOfCode": "VERSION_INFO = {\n    \"version\": __version__,\n    \"release_date\": __release_date__,\n    \"major\": VERSION[0],\n    \"minor\": VERSION[1],\n    \"patch\": VERSION[2],\n}",
        "detail": "app.VERSION",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "def upgrade():\n    # Initial migration does not make any changes,\n    # only marks the current database state\n    pass\ndef downgrade():\n    # Initial migration does not make any changes,\n    # no need for rollback operations\n    pass",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "def downgrade():\n    # Initial migration does not make any changes,\n    # no need for rollback operations\n    pass",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "revision = \"ada267176dd4\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Initial migration does not make any changes,\n    # only marks the current database state\n    pass\ndef downgrade():\n    # Initial migration does not make any changes,",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Initial migration does not make any changes,\n    # only marks the current database state\n    pass\ndef downgrade():\n    # Initial migration does not make any changes,\n    # no need for rollback operations",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Initial migration does not make any changes,\n    # only marks the current database state\n    pass\ndef downgrade():\n    # Initial migration does not make any changes,\n    # no need for rollback operations\n    pass",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.ada267176dd4_initial_migration",
        "description": "migrations.versions.ada267176dd4_initial_migration",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Initial migration does not make any changes,\n    # only marks the current database state\n    pass\ndef downgrade():\n    # Initial migration does not make any changes,\n    # no need for rollback operations\n    pass",
        "detail": "migrations.versions.ada267176dd4_initial_migration",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "def upgrade():\n    # Add last_login column to user table\n    op.add_column(\"user\", sa.Column(\"last_login\", sa.DateTime(), nullable=True))\ndef downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "def downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "revision = \"b9c2e1a8f4d2\"\ndown_revision = \"ada267176dd4\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add last_login column to user table\n    op.add_column(\"user\", sa.Column(\"last_login\", sa.DateTime(), nullable=True))\ndef downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "down_revision = \"ada267176dd4\"\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add last_login column to user table\n    op.add_column(\"user\", sa.Column(\"last_login\", sa.DateTime(), nullable=True))\ndef downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # Add last_login column to user table\n    op.add_column(\"user\", sa.Column(\"last_login\", sa.DateTime(), nullable=True))\ndef downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "description": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # Add last_login column to user table\n    op.add_column(\"user\", sa.Column(\"last_login\", sa.DateTime(), nullable=True))\ndef downgrade():\n    # Drop last_login column from user table\n    op.drop_column(\"user\", \"last_login\")",
        "detail": "migrations.versions.b9c2e1a8f4d2_add_last_login_field",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions[\"migrate\"].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions[\"migrate\"].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\"%\", \"%%\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\"%\", \"%%\")\n    except AttributeError:\n        return str(get_engine().url).replace(\"%\", \"%%\")\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(\"sqlalchemy.url\", get_engine_url())",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, \"metadatas\"):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, \"autogenerate\", False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger(\"alembic.env\")\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions[\"migrate\"].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger(\"alembic.env\")\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions[\"migrate\"].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions[\"migrate\"].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions[\"migrate\"].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, \"metadatas\"):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "check_app",
        "kind": 2,
        "importPath": "scripts.check_app",
        "description": "scripts.check_app",
        "peekOfCode": "def check_app():\n    \"\"\"Check if the application can be created and configured correctly.\"\"\"\n    try:\n        app = create_app()\n        print(\"✅ Application loaded successfully!\")\n        print(f\"✅ App name: {app.name}\")\n        print(f\"✅ Debug mode: {app.debug}\")\n        return True\n    except Exception as e:\n        print(f\"❌ Error loading application: {e}\")",
        "detail": "scripts.check_app",
        "documentation": {}
    },
    {
        "label": "parent_dir",
        "kind": 5,
        "importPath": "scripts.check_app",
        "description": "scripts.check_app",
        "peekOfCode": "parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\nsys.path.insert(0, parent_dir)\nfrom app import create_app  # noqa: E402\ndef check_app():\n    \"\"\"Check if the application can be created and configured correctly.\"\"\"\n    try:\n        app = create_app()\n        print(\"✅ Application loaded successfully!\")\n        print(f\"✅ App name: {app.name}\")\n        print(f\"✅ Debug mode: {app.debug}\")",
        "detail": "scripts.check_app",
        "documentation": {}
    },
    {
        "label": "fix_file",
        "kind": 2,
        "importPath": "scripts.fix_indentation",
        "description": "scripts.fix_indentation",
        "peekOfCode": "def fix_file():\n    \"\"\"Fix indentation in the file\"\"\"\n    with open(\"app/scout_analysis/services.py\", \"r\", encoding=\"utf-8\") as f:\n        lines = f.readlines()\n    # Fix the specific lines\n    if len(lines) >= 55:\n        lines[51] = \"            gemini = current_app.config.get('GEMINI_INSTANCE')\\n\"\n        lines[52] = \"            if not gemini:\\n\"\n        lines[53] = (\n            \"                current_app.logger.error(\"",
        "detail": "scripts.fix_indentation",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tests.run_testing",
        "description": "tests.run_testing",
        "peekOfCode": "app = create_app('testing')\n# Optional: Set up test data here\nwith app.app_context():\n    db.create_all()\n    print(\"✅ In-memory test database initialized.\")\n    # Example: Create a test user\n    # from app.models.user import User\n    # user = User(username='testuser', email='test@example.com')\n    # user.set_password('test123')\n    # db.session.add(user)",
        "detail": "tests.run_testing",
        "documentation": {}
    },
    {
        "label": "test_scout_analysis_api",
        "kind": 2,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "def test_scout_analysis_api():\n    print(\"Testing Scout Analysis API connection...\")\n    # Test text\n    test_text = (\n        \"Testing Gemini API connection. This is an NBA player: Lebron James, \"\n        \"he is an All-Star player.\"\n    )\n    with app.app_context():\n        try:\n            # Get API key information",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tests.test_api",
        "description": "tests.test_api",
        "peekOfCode": "app = create_app()\ndef test_scout_analysis_api():\n    print(\"Testing Scout Analysis API connection...\")\n    # Test text\n    test_text = (\n        \"Testing Gemini API connection. This is an NBA player: Lebron James, \"\n        \"he is an All-Star player.\"\n    )\n    with app.app_context():\n        try:",
        "detail": "tests.test_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "app = create_app(\"development\")  # Explicitly use development configuration\nif __name__ == \"__main__\":\n    # Disable auto-reload to ensure only one process loads the latest code\n    app.run(debug=True, use_reloader=False)",
        "detail": "run",
        "documentation": {}
    }
]